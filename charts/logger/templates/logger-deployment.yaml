{{ $redisNodeCount := .Values.redis.replicas | int }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drycc-logger
  labels:
    heritage: drycc
  annotations:
    component.drycc.cc/version: {{ .Values.imageTag }}
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: drycc-logger
  template:
    metadata:
      labels:
        app: drycc-logger
    spec:
      initContainers:
      - name: drycc-logger-init
        image: docker.io/drycc/python-dev:latest
        imagePullPolicy: {{.Values.imagePullPolicy}}
        command:
          - netcat
          - -v
          - -a
          - $(DRYCC_REDIS_ADDRS)
        env:
{{ if eq .Values.global.redisLocation "on-cluster"}}
        - name: DRYCC_REDIS_ADDRS
          value: "{{range $i := until $redisNodeCount}}drycc-redis-{{$i}}.drycc-redis.{{$.Release.Namespace}}.svc.{{$.Values.global.clusterDomain}}:6379{{if lt (add 1 $i) $redisNodeCount}},{{end}}{{end}}"
{{- else if eq .Values.global.redisLocation "off-cluster" }}
        - name: DRYCC_REDIS_ADDRS
          valueFrom:
            secretKeyRef:
              name: redis-creds
              key: addrs
{{- end }}
      containers:
      - name: drycc-logger
        image: {{.Values.imageRegistry}}/{{.Values.imageOrg}}/logger:{{.Values.imageTag}}
        imagePullPolicy: {{.Values.imagePullPolicy}}
        env:
        - name: STORAGE_ADAPTER
          value: redis
{{ if eq .Values.global.redisLocation "on-cluster"}}
        - name: DRYCC_REDIS_ADDRS
          value: "{{range $i := until $redisNodeCount}}drycc-redis-{{$i}}.drycc-redis.{{$.Release.Namespace}}.svc.{{$.Values.global.clusterDomain}}:6379{{if lt (add 1 $i) $redisNodeCount}},{{end}}{{end}}"
{{- else if eq .Values.global.redisLocation "off-cluster" }}
        - name: DRYCC_REDIS_ADDRS
          valueFrom:
            secretKeyRef:
              name: redis-creds
              key: addrs
{{- end }}
        - name: DRYCC_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-creds
              key: password
        ports:
        - containerPort: 8088
          name: http
{{- if or (.Values.limitsCpu) (.Values.limitsMemory)}}
        resources:
          limits:
{{- if (.Values.limitsCpu) }}
            cpu: {{.Values.limitsCpu}}
{{- end}}
{{- if (.Values.limitsMemory) }}
            memory: {{.Values.limitsMemory}}
{{- end}}
{{- end}}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8088
          initialDelaySeconds: 1
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8088
          initialDelaySeconds: 1
          timeoutSeconds: 1
